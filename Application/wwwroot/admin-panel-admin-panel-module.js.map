{"version":3,"sources":["./src/app/admin-panel/users/users.component.ts","./src/app/admin-panel/users/users.component.html","./src/app/admin-panel/admin-login/admin-login.component.ts","./src/app/admin-panel/admin-login/admin-login.component.html","./src/app/admin-panel/admin-panel.module.ts","./src/app/admin-panel/admin-panel-routing.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AAGG;AAErB;;;;;;;;;ICMtC,qEACI;IAAA,qEAAI;IAAA,uDAAiB;IAAA,4DAAK;IAC1B,qEAAI;IAAA,uDAAiB;IAAA,4DAAK;IAC1B,qEAAI;IAAA,4EAAuF;IAApC,kWAAmC;IAAC,iEAAM;IAAA,4DAAS;IAAA,4DAAK;IAC/G,qEAAI;IAAA,4EAA0E;IAAtC,4aAAqC;IAAC,uEAAW;IAAA,4DAAS;IAAA,4DAAK;IAC3G,4DAAK;;;IAJG,0DAAiB;IAAjB,iFAAiB;IACjB,0DAAiB;IAAjB,iFAAiB;;;IAqBzB,0EAA8D;IAAA,mEAAQ;IAAA,4DAAM;;;IAK5E,0EAAyD;IAAA,mEAAQ;IAAA,4DAAM;;;;IAhB/E,yEACE;IAAA,wEAA+C;IAAA,0EAAe;IAAA,4DAAK;IACnE,4EACE;IADqD,qLAAS,iBAAc,aAAa,CAAC,IAAE;IAC5F,2EAA4C;IAAA,iEAAO;IAAA,4DAAO;IAC5D,4DAAS;IACX,4DAAM;IACN,0EACE;IAAA,2EACE;IAD4B,iUAAuB;IACnD,0EACI;IAAA,4EAAyB;IAAA,2EAAe;IAAA,4DAAQ;IAChD,wEACA;IAAA,4HAA4E;IAChF,4DAAM;IACN,2EACI;IAAA,6EAAqB;IAAA,wEAAY;IAAA,4DAAQ;IACzC,wEACA;IAAA,4HAAuE;IAC3E,4DAAM;IACN,2EACI;IAAA,8EAA8C;IAAA,kEAAM;IAAA,4DAAS;IACjE,4DAAM;IACR,4DAAO;IACT,4DAAM;;;IAfE,0DAAuB;IAAvB,uFAAuB;IAII,0DAAiC;IAAjC,oGAAiC;IAKlC,0DAA6B;IAA7B,gGAA6B;;AD3B5D,MAAM,cAAc;IAOzB,YAAoB,UAAqB,EACrB,YAAgC,EAChC,YAAqB;QAFrB,eAAU,GAAV,UAAU,CAAW;QACrB,iBAAY,GAAZ,YAAY,CAAoB;QAChC,iBAAY,GAAZ,YAAY,CAAS;QARzC,UAAK,GAAmB,EAAE,CAAC;QASzB,IAAI,CAAC,SAAS,GAAG,IAAI,wDAAS,CAAC;YAC7B,WAAW,EAAC,IAAI,0DAAW,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACvD,OAAO,EAAC,IAAI,0DAAW,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACpD,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE;aAC5B,SAAS,CAAC,QAAQ,GAAE;YACnB,KAAI,IAAI,GAAG,IAAI,QAAQ,EAAC;gBACtB,IAAI,IAAI,GAAG,IAAI,4DAAa,EAAE,CAAC;gBAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;gBAC1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC;gBAC9C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAC;YACtB,IAAI,KAAK,GAAG,IAAI,8DAAe,EAAE,CAAC;YAClC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC;YACzC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;YAC5D,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;YAEpD,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC;iBACpC,SAAS,CACR,QAAQ,GAAE,GAAC,CAAC,EACZ,CAAC,KAAuB,EAAC,EAAE;gBACzB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC1D,CAAC,EACD,GAAE,EAAE;gBACF,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,kBAAkB,EAAC,SAAS,CAAC,CAAC;gBAC5D,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;gBACvB,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;YACjC,CAAC,CACF,CAAC;SACH;IACH,CAAC;IAED,UAAU,CAAC,QAAe;QACxB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC;aACnC,SAAS,CACR,QAAQ,GAAE,GAAC,CAAC,EACZ,CAAC,KAAuB,EAAC,EAAE;YACzB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC,EACD,GAAE,EAAE;YACF,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,2BAA2B,EAAC,SAAS,CAAC,CAAC;YACrE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,GAAE,KAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAC,CAAC,CAAC,CAAC;YAC3E,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;QACjC,CAAC,CACF;IACH,CAAC;IAED,IAAI,CAAC,OAAO,EAAC,QAAQ;QACnB,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC,cAAc,EAAE,mBAAmB,EAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,GAAE,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,GAAE,CAAC,CAAC,CAAC;IACrH,CAAC;IAED,YAAY,CAAC,WAAmB;QAC9B,OAAO,CACL,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;YACnD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;YAC1C,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,SAAS;gBACxC,IAAI,CAAC,aAAa;gBAClB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CACxD,CAAC;IACJ,CAAC;;4EAhFU,cAAc;8FAAd,cAAc;QCZ3B,yEACI;QAAA,2EACI;QAAA,2EACI;QAAA,qEACI;QAAA,qEAAI;QAAA,yEAAc;QAAA,4DAAK;QACvB,qEAAI;QAAA,mEAAQ;QAAA,4DAAK;QACjB,gEAAS;QACT,gEAAS;QACb,4DAAK;QACT,4DAAQ;QACR,4EACI;QAAA,2GAKK;QACT,4DAAQ;QACZ,4DAAQ;QACZ,4DAAM;QAGN,yMAwBgB;;QAnCiB,2DAAQ;QAAR,8EAAQ;;6FDC5B,cAAc;cAJ1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;aACtC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD;AACP;AACmC;AAEvC;;;;;;;;;ICL9C,yEAAkE;IAAA,sEAAW;IAAA,4DAAM;;;IAW7E,sEACE;IAAA,8EACF;IAAA,4DAAM;;;IACN,sEAAqC;IAAA,wEAAa;IAAA,4DAAM;;;IAQ1D,0EAIE;IAAA,iFACF;IAAA,4DAAM;;;;IA1BV,0EAME;IAHA,oUAAgC;IAGhC,yEACE;IAAA,2EAAmB;IAAA,gEAAK;IAAA,4DAAQ;IAChC,sEACA;IAAA,yEACE;IAAA,sHAEM;IACN,sHAAwD;IAC1D,4DAAM;IACR,4DAAM;IAEN,yEACE;IAAA,2EAAsB;IAAA,oEAAQ;IAAA,4DAAQ;IACtC,wEACA;IACA,yHAKM;IACR,4DAAM;IAEN,8EAA8C;IAAA,iEAAK;IAAA,4DAAS;IAC9D,4DAAO;;;IA5BL,uFAAuB;IAQb,0DAAyB;IAAzB,4FAAyB;IAGzB,0DAA6B;IAA7B,gGAA6B;IASlC,0DAA4B;IAA5B,+FAA4B;;ADR5B,MAAM,mBAAmB;IAQ9B,YACU,MAAc,EACd,UAAsB,EACtB,mBAAwC,EACxC,WAAuB;QAHvB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,gBAAW,GAAX,WAAW,CAAY;QAPjC,kBAAa,GAAW,KAAK,CAAC;IAS9B,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG,IAAI,wDAAS,CAC5B;YACE,KAAK,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,KAAK,EAAE,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrE,QAAQ,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACrD,CACF,CAAC;QACF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAE/C,IAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,GAAE,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAC;YACrE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtB;;YAAK,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,CAAC;IAEH,iBAAiB;QACf,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAC;YACtB,IAAI,CAAC,UAAU;iBACV,KAAK,CAAC,IAAI,2DAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBACtC,SAAS,CACR,CAAC,QAAQ,EAAE,EAAE;gBACX,IAAG,QAAQ,CAAC,aAAa,CAAC,IAAE,IAAI,EAAC;oBAC/B,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,qCAAqC,EAAC,OAAO,CAAC,CAAC;oBAClF,MAAM,IAAI,sEAAiB,CAAC,EAAC,MAAM,EAAC,GAAG,EAAC,CAAC,CAAC;iBAC3C;gBACD,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC9D,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnD,IAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAC;oBAC3B,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,uBAAuB,EAAC,OAAO,CAAC,CAAC;oBACpE,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;oBACxC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;oBAClC,MAAM,IAAI,sEAAiB,CAAC,EAAC,MAAM,EAAC,GAAG,EAAC,CAAC,CAAC;iBAC3C;YACH,CAAC,EACD,CAAC,GAAsB,EAAE,EAAE;gBACzB,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9D,CAAC,EACD,GAAG,EAAE;gBACH,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;gBACnE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;gBAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;gBACvB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAChC,CAAC,CACF,CAAC;SACP;IACD,CAAC;IAEH,UAAU,CAAC,WAAmB;QAC5B,OAAO,CACL,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;YACnD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;YAC1C,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,SAAS;gBACxC,IAAI,CAAC,aAAa;gBAClB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CACxD,CAAC;IACJ,CAAC;;sFAxEU,mBAAmB;mGAAnB,mBAAmB;QCfhC,+GAAmF;QACnF,kHA8BO;QAEP,2EAA+B;;QAjCmB,8EAAc;QAK7D,0DAAc;QAAd,8EAAc;;6FDUJ,mBAAmB;cAN/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,MAAM,EAAE,EACP;aACF;;;;;;;;;;;;;;AEdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACZ;AACM;AAEwB;AACG;AACjB;;AAWlD,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBANlB;YACP,4DAAY;YACZ,mFAAuB;YACvB,kEAAmB;SACpB;mIAEU,gBAAgB,mBAPZ,sFAAmB,EAAE,qEAAc,aAEhD,4DAAY;QACZ,mFAAuB;QACvB,kEAAmB;6FAGV,gBAAgB;cAR5B,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,sFAAmB,EAAE,qEAAc,CAAC;gBACnD,OAAO,EAAE;oBACP,4DAAY;oBACZ,mFAAuB;oBACvB,kEAAmB;iBACpB;aACF;;;;;;;;;;;;;;AChBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD;AACiB;AACjC;AACc;;;AAEvD,MAAM,MAAM,GAAW,CAAC;QACtB,IAAI,EAAC,EAAE;QACP,SAAS,EAAC,sFAAmB;QAC7B,QAAQ,EAAC,CAAC;gBACR,IAAI,EAAC,OAAO;gBACZ,SAAS,EAAC,qEAAc;aACzB,CAAC;KACH,CAAC,CAAC;AAMI,MAAM,uBAAuB;;sGAAvB,uBAAuB;wKAAvB,uBAAuB,kBAHzB,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAC9B,4DAAY;mIAEX,uBAAuB,uFAFxB,4DAAY;6FAEX,uBAAuB;cAJnC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB","file":"admin-panel-admin-panel-module.js","sourcesContent":["import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { NotificationService } from './../../Services/notification.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { UserCredModel, PassChangeModel } from './../../Models/models';\nimport { ApiService } from './../../Services/apiservice.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n})\nexport class UsersComponent implements OnInit {\n  users:UserCredModel[] = [];\n  passChangeUsername:string;\n\n  formGroup:FormGroup;\n  formSubmitted: boolean;\n\n  constructor(private apiService:ApiService,\n              private notifService:NotificationService,\n              private modalService:NgbModal) { \n    this.formGroup = new FormGroup({\n      currentpass:new FormControl(null,[Validators.required]),\n      newpass:new FormControl(null,[Validators.required])\n    });\n  }\n\n  ngOnInit(): void {\n    this.apiService.GetAllUsers()\n    .subscribe(response=>{\n      for(let key in response){\n        let user = new UserCredModel();\n        user.userName = response[key]['userName'];\n        user.password = response[key]['passwordHash'];\n        this.users.push(user);\n      }\n    });\n  }\n\n  onSubmit(){\n    this.formSubmitted = true;\n    if(this.formGroup.valid){\n      let model = new PassChangeModel();\n      model.userName = this.passChangeUsername;\n      model.currentPass = this.formGroup.get('currentpass').value;\n      model.newPass = this.formGroup.get('newpass').value;\n\n      this.apiService.changePassword(model)\n      .subscribe(\n        response=>{},\n        (error:HttpErrorResponse)=>{\n          this.notifService.showError(error.message,error.status);\n        },\n        ()=>{\n          this.notifService.showSuccess(\"Changed Password\",\"Success\");\n          this.formGroup.reset();\n          this.modalService.dismissAll();\n        }\n      );\n    }\n  }\n\n  DeleteUser(userName:string){\n    this.apiService.DeleteUser(userName)\n    .subscribe(\n      response=>{},\n      (error:HttpErrorResponse)=>{\n        this.notifService.showError(error.message,error.status);\n      },\n      ()=>{\n        this.notifService.showSuccess(\"the user has been deleted\",\"Success\");\n        this.users.splice(this.users.findIndex(user=>user.userName == userName),1);\n        this.passChangeUsername = null;\n        this.modalService.dismissAll();\n      }\n    )\n  }\n\n  open(content,userName) {\n    this.passChangeUsername = userName;\n    this.modalService.open(content, {ariaLabelledBy: 'modal-basic-title'}).result.then((result) => {}, (reason) => {});\n  }\n\n  checkInvalid(controlName: string) {\n    return (\n      (this.formGroup.get(controlName).hasError('required') &&\n        this.formGroup.get(controlName).touched) ||\n      (this.formGroup.get(controlName).untouched &&\n        this.formSubmitted &&\n        this.formGroup.get(controlName).hasError('required'))\n    );\n  }\n}\n","<div class=\"ml-4 mt-4\">\n    <table class=\"table table-striped bg-black col-sm-11\"> \n        <thead class=\"text-white\">\n            <tr>\n                <th>UserName/Email</th>\n                <th>Password</th>\n                <th></th>\n                <th></th>\n            </tr>\n        </thead>\n        <tbody class=\"text-white\">\n            <tr *ngFor=\"let user of users\">\n                <td>{{user.userName}}</td>\n                <td>{{user.password}}</td>\n                <td><button class=\"btn btn-primary font-size-13px p-1\" (click)=\"DeleteUser(user.userName)\">Delete</button></td>\n                <td><button class=\"btn btn-warning p-1\" (click)=\"open(content,user.userName)\">Change Pass</button></td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n<ng-template #content let-modal>\n    <div class=\"modal-header\">\n      <h4 class=\"modal-title\" id=\"modal-basic-title\">Change Password</h4>\n      <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click');\">\n        <span aria-hidden=\"true\" class=\"text-white\">&times;</span>\n      </button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label for=\"currentpass\">Curret Password</label>\n            <input type=\"password\" formControlName=\"currentpass\" class=\"form-control\">\n            <div class=\"text-warning\" *ngIf=\"checkInvalid('currentpass')\">Required</div>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"newpass\">New Password</label>\n            <input type=\"password\" formControlName=\"newpass\" class=\"form-control\">\n            <div class=\"text-danger\" *ngIf=\"checkInvalid('newpass')\">Required</div>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"submit\" class=\"btn btn-success\">Change</button>\n        </div>\n      </form>\n    </div>\n  </ng-template>","import { UserService } from './../../Services/userservice.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Login } from 'src/app/Models/models';\nimport { ApiService } from 'src/app/Services/apiservice.service';\nimport { NotificationService } from 'src/app/Services/notification.service';\n\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styles: [\n  ]\n})\nexport class AdminLoginComponent implements OnInit {\n  formGroup: FormGroup;\n  email: AbstractControl;\n  password: AbstractControl;\n\n  formSubmitted:boolean = false;\n  showForm:boolean;\n\n  constructor(\n    private router: Router,\n    private apiService: ApiService,\n    private notificationService: NotificationService,\n    private userService:UserService\n  ) {\n  }\n\n  ngOnInit(): void {\n      this.formGroup = new FormGroup(\n        {\n          email: new FormControl(null, [Validators.email, Validators.required]),\n          password: new FormControl(null, Validators.required)\n        }\n      );\n      this.email = this.formGroup.get('email');\n      this.password = this.formGroup.get('password');\n\n      if(this.router.url.indexOf('adminpanel') +10 == this.router.url.length){\n        this.showForm = true;\n      }else this.showForm = false;\n    }\n\n  submitCredentials() {\n    this.formSubmitted = true;\n    if(this.formGroup.valid){\n      this.apiService\n          .login(new Login(this.formGroup.value))\n          .subscribe(\n            (response) => {\n              if(response['accessToken']==null){\n                this.notificationService.showError(\"Wrong Credentials or Not Registered\",\"Error\");\n                throw new HttpErrorResponse({status:401});\n              }\n              localStorage.setItem('access_token', response['accessToken']);\n              localStorage.setItem('userId', response['userId']);\n              if(this.userService.isUser()){\n                this.notificationService.showError(\"Only have User Access\",\"Error\");\n                localStorage.removeItem('access_token');\n                localStorage.removeItem('userId');\n                throw new HttpErrorResponse({status:403});\n              }\n            },\n            (err: HttpErrorResponse) => {\n              this.notificationService.showError(err.message, err.status);\n            },\n            () => {\n              this.notificationService.showSuccess('Admin Logged In', 'Success');\n              this.formSubmitted = false;\n              this.formGroup.reset();\n              this.router.navigateByUrl('');\n            }\n          );\n    } \n    }\n\n  checkValid(controlName: string) {\n    return (\n      (this.formGroup.get(controlName).hasError('required') &&\n        this.formGroup.get(controlName).touched) ||\n      (this.formGroup.get(controlName).untouched &&\n        this.formSubmitted &&\n        this.formGroup.get(controlName).hasError('required'))\n    );\n  }\n\n}\n","<div class=\"display-4 ml-4 mt-4 text-white pl-1\" *ngIf=\"showForm\">ADMIN LOGIN</div>\n<form\n  class=\"ml-3 mt-2 col-sm-4 text-white\"\n  [formGroup]=\"formGroup\"\n  (ngSubmit)=\"submitCredentials()\"\n  *ngIf=\"showForm\"\n>\n  <div class=\"form-group\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" class=\"form-control\" formControlName=\"email\" />\n    <div class=\"text-danger\">\n      <div *ngIf=\"checkValid('email')\">\n        Email is required\n      </div>\n      <div *ngIf=\"email.hasError('email')\">Invalid Email</div>\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"password\">Password</label>\n    <input type=\"password\" class=\"form-control\" formControlName=\"password\" />\n    <!-- ((formGroup.touched || password.touched) && password.errors)||  -->\n    <div\n      *ngIf=\"checkValid('password')\"\n      class=\"when-invalid\"\n    >\n      Password is required\n    </div>\n  </div>\n\n  <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n</form>\n\n<router-outlet></router-outlet>\n","import { ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminPanelRoutingModule } from './admin-panel-routing.module';\nimport { AdminLoginComponent } from './admin-login/admin-login.component';\nimport { UsersComponent } from './users/users.component';\n\n\n@NgModule({\n  declarations: [AdminLoginComponent, UsersComponent],\n  imports: [\n    CommonModule,\n    AdminPanelRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AdminPanelModule { }\n","import { UsersComponent } from './users/users.component';\nimport { AdminLoginComponent } from './admin-login/admin-login.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [{\n  path:'',\n  component:AdminLoginComponent,\n  children:[{\n    path:'users',\n    component:UsersComponent\n  }]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminPanelRoutingModule { }\n"],"sourceRoot":"webpack:///"}